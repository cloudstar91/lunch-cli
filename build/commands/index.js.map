{"version":3,"sources":["index.js"],"names":["main","id","food","extras","MenuList","list","orderNumber","setOrderNumber","step","setStep","handleSubmit","data","n","input","parseInt","numberRange","map","i","includes","console","log","e"],"mappings":"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","file":"index.js","sourceRoot":"../../commands","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text, Box } from \"ink\";\nimport Table from \"ink-table\";\nimport TextInput from \"ink-text-input\";\n\nconst main = [\n\t{ id: 1, food: \"Food A\" },\n\t{ id: 2, food: \"Food B\" },\n\t{ id: 3, food: \"Food C\" },\n];\n\nconst extras = [\n\t{ id: 1, food: \"Them A\" },\n\t{ id: 2, food: \"Them B\" },\n\t{ id: 3, food: \"Them C\" },\n\t{ id: 3, food: \"Them D\" },\n];\n\n///List all Menu for today\nconst MenuList = ({ list }) => {\n\tconst [orderNumber, setOrderNumber] = useState(\"\");\n\tconst [step, setStep] = useState(1);\n\n\tconst handleSubmit = (data, n) => {\n\t\tconst input = parseInt(n);\n\t\tconst numberRange = data.map(i => i.id);\n\t\tif (input === 0 || numberRange.includes(input)) {\n\t\t\tconsole.log(\"Going to next step \" + (step + 1));\n\t\t\tsetStep(step + 1);\n\t\t} else {\n\t\t\tconsole.log(\"number invalid\");\n\t\t\tconsole.log(numberRange);\n\t\t\tconsole.log(input);\n\t\t}\n\t};\n\n\tswitch (step) {\n\t\tcase 1:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<Text>Pick ur main</Text>\n\t\t\t\t\t<Table data={main} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<Box marginRight={1}>Pick number:</Box>\n\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tvalue={orderNumber}\n\t\t\t\t\t\t\tonChange={e => setOrderNumber(e)}\n\t\t\t\t\t\t\tonSubmit={() => handleSubmit(main, orderNumber)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 2:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<Text> Pick your extras</Text>\n\t\t\t\t\t<Table data={extras} />\n\t\t\t\t\t<Box>\n\t\t\t\t\t\t<Box marginRight={1}>Pick number:</Box>\n\t\t\t\t\t\t<TextInput\n\t\t\t\t\t\t\tvalue={orderNumber}\n\t\t\t\t\t\t\tonChange={e => setOrderNumber(e)}\n\t\t\t\t\t\t\tonSubmit={() => handleSubmit(extras, orderNumber)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Box>\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 3:\n\t\t\treturn <Text>Done</Text>;\n\t\tdefault:\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<div>How?</div>\n\t\t\t\t</>\n\t\t\t);\n\t}\n};\n\nexport default MenuList;\n"]}